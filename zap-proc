#!/bin/bash
#
#  Synopsis:
#	Safe, chatty zap of process using variations of pkill.
#  Description:
#	Zap a process whose id is stored in a file.  Should the file not
#	exist or not disappear after pkill -F, then force killing process
#	with an explicit list of process names.  Explicit process names
#	are used to prevent killing invocing scripts with names similar
#	to victim processes.
#  Usage:
#	zap-proc <pid-file>
#	zap-proc <pid-file> <exact-proc1> <exact-proc2> ...
#  Exit Status:
#	0	no processes running
#	1	unexpected error
#  Note:
#	Need to add -9 for stubborn processes.
#

PROG=$(basename $0)
PROC_OWNER=$(id -nu)
PROC_PAUSE=3

log()
{
	if [ -z "$PROC_NAME" ];  then
		PROC_WHO="$PROG#$$: $PROC_SUFFIX"
	else
		PROC_WHO="$PROG#$$"
	fi
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $PROC_WHO: $@"
}

ERROR()
{
	log "ERROR: $@" >&2
}

die()
{
	ERROR "$@"
	exit 1
}

_zap()
{
	WHAT=$1
	shift

	log "pkill: $WHAT: $@"
	pkill -u $PROC_OWNER $@
	STATUS=$?
	case $STATUS in
	0)
		;;
	1)
		log "WARN: $WHAT: no process running (ok)"
		;;
	*)
		die "pkill $WHAT failed: exit status=$STATUS"
		;;
	esac
	rm -f $PID_PATH || die "rm -f pid file failed: exit status=$?"
}

#  zap list of processes with particular names
_exact_zap()
{
	if [ $# = 0 ];  then
		_zap EXACT $PROC_NAME
		exit
	fi

	log "EXACT: forcing the kill of $# processes"
	for EXACT_PROC in $@;  do
		_zap EXACT -x $EXACT_PROC || exit 1
	done
	exit 0
}

#  zap process when contents of pid file may be corrupt.

_corrupt_zap()
{
	ERROR "corrupted pid file: $PID_PATH"
	if [ -s $PID_PATH ];  then
		ERROR "hex dump of pid file: $PID_PATH"
		echo
		hexdump -C $PID_PATH
		echo
	else
		ERROR 'pid file is empty'
	fi
	_exact_zap || exit 1
}

test $# = 0 && die 'no arguments: pid file must be first argument'

PID_PATH=$1
shift
PROC_NAME=$(basename $(basename $PID_PATH) .pid)
log "process owner: $PROC_OWNER"

if [ ! -e $PID_PATH ];  then
	log "no pid file (ok): $PID_PATH"
	log "process $PROC_NAME may not be running"
	_exact_zap
	exit
fi

log "pid file exists: $PID_PATH"

if [ ! -s $PID_PATH ];  then
	log "WARN: empty pid file: $PID_PATH"
	_exact_zap
	exit
fi

#  first line of pid contains the process id

PID=$(cat $PID_PATH | head -1)
case "$PID" in
[0-9]*)
	log "process to kill: $PROC_NAME#$PID owned by $PROC_OWNER"
	;;
*)
	ERROR "first line of pid file is not number: $PID"
	_corrupt_zap
	exit
esac

_zap GRACEFUL -F $PID_PATH
test $? -lt 2 || exit 1

log "zapped $PROC_NAME process with pid #$PID"
log "sleeping $PROC_PAUSE sec while process #$PID exits ..."
sleep $PROC_PAUSE
test -e $PID_PATH || exit 0

log "pid file still exists, so force exact kill"
_exact_zap
test -e $PID_PATH || exit 0

log "hmm, pid still exists, so nuke $PID with -9 and remove pid file"
kill -9 $PID
rm -f $PID_PATH || die "rm -f $PID_PATH failed: exit status=$?"
exit 0
