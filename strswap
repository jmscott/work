#!/bin/bash
help()
{
	cat <<END
Synopsis:
	Swap all occurences of old string with new string in files.
Usage:
	$USAGE
Description:
	Replace all occurences of old string with new string in a text file.
	The overwriting of the new file is handled by the overwrite script.

	Unfortunately, neither the source nor target strings can contain
	regular expression meta characters used by sed, since the 
	escaping algorithm in strswap is incorrect.

  	This script is derived from an example in the mighty fine book
	title "The Unix Programming Environment" by Rob Pike and Brian
	Kernighan.
Depends:
	GNU or BSD sed command
	https://github.com/jmscott/work/overwrite
See:
	https://github.com/jmscott/work/strswap
	http://www.amazon.com/Unix-Programming-Environment-Prentice-Hall-Software/dp/013937681X

Note:
	A --verbose or -v option would be nice.

	The meta escaping of sed command needs a rethink.

	A --word option would be nice.
END
}

PROG=$(basename $0)
USAGE="$PROG old_string new_string file1 [file2 ...]"

die()
{
        echo "$PROG: ERROR: $@" >&2
        echo "usage: $USAGE" >&2
        exit 1
}

#
#  Synopsis:
#	Half assed attempt to escape sed regular expression meta characters.
#
escape_sed_meta()
{
	echo "$1" |
		sed "s/'/\\'/g" |
		sed 's/[\]/[\]/g' |
		sed 's/\//\\\//g' |
		sed 's/\./\\./g' |
		sed 's/\*/\\*/g'
}

test $# -lt 3 && die "wrong number of arguments: $#"

#
#  Escape the strings.
#  This algorithm is not correct, since not all sed meta characters
#  are escaped.
#
OLD_STRING="$(escape_sed_meta "$1")"
NEW_STRING="$(escape_sed_meta "$2")"
SED_COMMAND='s/'$OLD_STRING'/'$NEW_STRING'/g'
echo "SED_COMMAND=$SED_COMMAND"

shift;  shift

for FILE;  do
        sed "$SED_COMMAND" $FILE | overwrite $FILE
done
