#!/usr/bin/env bash
#
#  Synopsis:
#	Alert the masses on transitions in exit codes of curl requests.
#
#  Description:
#	"furl" is a shell script to monitor the state of URLs fetched via
#	"curl", the famous GNU command that fetchs urls via many protocols.
#	"furl" means "Fault URL".
#
#	A fault is a change in the exit status of curl invocations.
#	The exit status is written to the file $FURL_ROOT/run/<tag>.furl.
#	Additionally, when no previous exit status exists, furl assumes
#	the status START.
#
#	Upon fault, an email notification is sent.  Faults are cleared outside
#	of furl by removing the status file in $FURL_ROOT/run/<tag>.furl.
#	Notifications in furl are email messages, sent to a list of users
#	specified on the command line.
#
#	After a curl request, the exit code is mapped to OK or ERROR.
#	The exit status codes fall into three categories:
#
#		START:	created file <tag>.furl
#		OK:	exit status == 0
#		ERR:	exit status > 0
#
#	All requests are timed out.  The default timeout is 30 secs.  A timeout
#	maps to the ERR state.
#
#	The three curl states define a state machine with 27 dimensions.  We
#	enumerate the states which trigger an notification.  Unenumerated
#	transitions do nothing.
#
#		START:		notify hello, world
#		START -> OK:	notify OK <- START
#		START -> ERR:	notify ERR(exit status code) <- START
#
#		ERR -> OK:	notify OK <- ERR(exit status code)
#		OK -> ERR:	notify ERR(exit status code) <- OK
#
#  Usage:
#	export FURL_ROOT=/home/furl
#
#	furl							\
#		--tag panoz					\
#		--url http://panoz.setspace.com			\
#		--notify jmscott@setspace.com			\
#		--notify 2147701797@txt.att.net
#  See:
#	https://github.com/jmscott/work/tree/master/furl
#  Note:
#	The transition of NULL -> NULL is problematic and may be a runaway.
#	For example, what happens when shortage of disk prevents writing
#	the initialze state file in $FURL_ROOT/run/<tab>.furl?  Such a
#	situation may gernate many NULL->NULL transition.
#
#	Why is a warning issued when default write-out file does not exist.
#	Wouldn't a fault be more natural?
#
PROG=$(basename $0)
LOCK=
TAG=
URL=
NOTIFY=
MAX_TIMEOUT=30
STATE_PATH=
CURL_OUTPUT=
WRITE_OUT=etc/write-out.conf
CURL_CONFIG=

die()
{
	log "ERROR: $PROG: $@" >&2
	exit 1
}

panic()
{
	die "PANIC: $@"
}

warn()
{
	log "WARN: $@"
}

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): ${TAG:-$PROG}#$$: $@"
}

notify()
{
	SUBJECT="$TAG: $1"
	log "mail: $SUBJECT: $NOTIFY ..."
	date | mail -s "$SUBJECT" $NOTIFY
}

leave()
{
	STATUS=$?
	_STATUS=0

	#
	#  Zap the temporary curl file.
	#
	if [ -f "$CURL_OUTPUT" ];  then
		if rm $CURL_OUTPUT;  then
			true
		else
			log "ERROR: rm $CURL_OUTPUT failed"
			_STATUS=1
		fi
	fi

	if [ -n "$LOCK" ];  then
		if rm $LOCK;  then
			true
		else
			log "ERROR: rm $LOCK failed"
			pwd
			_STATUS=1
		fi
	fi
	test $_STATUS = 0 || STATUS=$_STATUS
	log 'good bye, cruel world'
	exit $STATUS
}

log 'hello, world'
trap leave EXIT

#
#  Go to $FURL_ROOT directory and source in etc/profile.
#
case "$FURL_ROOT" in
'')
	die "environment variable FURL_ROOT not defined"
	;;
*)
	log "FURL_ROOT=$FURL_ROOT"
	cd $FURL_ROOT || die "cd $FURL_ROOT failed"
	test -r etc/profile || die "can't read $FURL_ROOT/etc/profile"
	. etc/profile

	#  insure the $FURL_ROOT/spool directory exists

	if [ ! -e run ];  then
		warn "making directory: $(pwd)/run"
		mkdir -p run || die 'mkdir run/ failed'
	fi
	;;
esac

CURL_OUTPUT=${TMPDIR:=/tmp}/$PROG-$(time +'%s')-$$.curl
log "curl output path: $CURL_OUTPUT"

if [ -n "$WRITE_OUT" -a ! -f "$WRITE_OUT" ];  then
	warn "can't read write out file: $WRITE_OUT"
	WRITEOUT=
fi

#
#  Process command line arguments.
#
while [ "$1" ];  do
	ARG=$1
	shift
	case "$ARG" in
	--url)
		test -n "$1" || die 'option --url: missing url'
		URL="$1"
		shift
		;;
	--curl-config)
		test -n "$1" || die 'option --curl-config: missing file path'
		CURL_CONFIG=$1
		test -r "$CURL_CONFIG" ||
			die "option --curl-config: can't read file $CURL_CONFIG"
		shift
		;;
	--curl-option)
		test -n "$1" || die 'option --curl-option: missing option'
		CURL_OPTION="$CURL_OPTION $1"
		shift
		;;
	--max-time)
		test -n "$1" || die 'option --max-time: missing seconds'
		MAX_TIME="$1"
		shift
		;;
	--notify)
		N="$1"
		test -n "$1" || die 'option --notify: missing email address'
		#
		#  Accumulate email addresses with mutiple --notify
		#
		if [ -n "$NOTIFY" ];  then
			NOTIFY="$NOTIFY $1"
		else
			NOTIFY="$1"
		fi
		shift
		;;
	--tag)
		TAG=$1
		shift
		;;
	--*)
		die "unknown option: $ARG"
		;;
	*)
		die "unknown argument: $ARG"
		;;
	esac
done

#
#  Is another curl-fault running?
#  Need to check age of pid file.
#
_LOCK=run/$PROG-$TAG.pid
if [ -f $_LOCK ];  then
	warn "lock file $_LOCK exists"
	warn "rm $(pwd)/$_LOCK if you suspect an error"
	leave 0
fi
echo $$ >$_LOCK || die "echo $$ >$_LOCK failed"
LOCK=$_LOCK

#
#  URL argument is required unless --config exists.
#
if [ -n "$CURL_CONFIG" ];  then
	log "curl config: $CURL_CONFIG"
	cat $CURL_CONFIG
	CURL_CONFIG="--config $CURL_CONFIG"
else
	test -n "$URL" || die 'missing required option --url'
	log "url: $URL"
	URL="--url $URL"
fi

test -n "$TAG" || die 'missing required option --tag'
log "tag: $TAG"

test -n "$NOTIFY" || die 'missing required option --notify'
log "notify: $NOTIFY"

if [ -n "$CURL_OPTION" ];  then
	log "curl option: $CURL_OPTION"
fi

if [ -n "$MAX_TIME" ];  then
	log "connect timeout: $MAX_TIME"
	MAX_TIME="--max-time $MAX_TIME"
fi

log "temporary curl output: $CURL_OUTPUT"

STATE_PATH=run/$TAG.state
log "state path: $STATE_PATH"

#
#  Missing state path implies we are starting, so send an alert message
#  and let the next pass test the fault.
#
if [ ! -f $STATE_PATH ];  then
	log "missing $STATE_PATH"
	log "setting to start state"

	#
	#  DO NOT send alert if write fails, to prevent runaways.
	#  Really ought to prevent runaways by tracking last successfull sent.
	#  furl needs a separate monitor for such situations.
	#
	echo START >$STATE_PATH ||
				panic "write to state file failed: $STATE_PATH"
	notify 'hello, world'
	exit 0
fi

test -r $STATE_PATH || panic "can't read state file: $STATE_PATH"
test -s $STATE_PATH || panic "empty state file: $STATE_PATH"

STATE=$(cat $STATE_PATH)
log "state: $STATE"

if [ -n "$WRITE_OUT" ];  then
	log "write out file: $WRITE_OUT"
	WRITE_OUT="--write-out @$WRITE_OUT"
fi
log 'calling curl ...'

curl -q $WRITE_OUT $CURL_CONFIG $CURL_OPTION $MAX_TIME		\
	--silent						\
	--output $CURL_OUTPUT					\
	$URL

STATUS=$?
log "curl exit status: $STATUS"
case $STATUS in
0)
	STATUS='OK'
	;;
[1-9]*)
	STATUS="ERR($STATUS)"
	;;
*)	panic "impossible curl exit status: $STATUS"
	;;
esac

#
#  Status didn't change, so do nothing.
#
if [ $STATUS = $STATE ];  then
	log "no change in status: $STATUS"
	#
	#  Touch the file for quick reference of time last test.
	#  no exit status for touch??
	#
	touch $STATE_PATH || panic "touch $STATE_PATH failed: exit status=$?"

	#  do not create empty state file.  macos does not have the
	#  --no-create option.

	if [ ! -s $STATE_PATH ];  then
		rm $STATE_PATH
		panic "unexpected empty state file: $STATE_PATH"
	fi
	exit 0
fi

STEP="$STATE -> $STATUS"
log "step: $STEP"

#
#  State changed so update file run/<tag>.furl.
#  Notice that just because the state changed doesn't mean we realert.
#
echo $STATUS >$STATE_PATH
test -s || panic "write state file failed: $STATE_PATH"

#
#  Handle the status fault.
#
case $STATUS in
'START -> OK: 0')
	notify 'ok <- start'
	;;

0)
	#
	#  Going from ok to failed state
	#
	case $STATE in
	start)
		log "going from start to ok state"
		notify 'ok <- start'
		;;
	*)
		log "going from failed($STATE) to ok state"
		notify "ok <- failed($STATE)"
		;;
	esac
	;;
*)
	#
	#  Going to failed state
	#
	case $STATE in
	0)
		log "going from ok to failed"
		notify "failed($STATUS) <- ok"
		;;
	start)
		log "going from start to failed"
		notify "failed($STATUS) <- start"
		;;
	*)
		warn "failed status changed to another status during fault"
		warn "previous status=$STATE, new status=$STATUS"
		warn 'no alert notice sent'
		touch --no-create $STATE_PATH
		;;
	esac
	;;
esac
