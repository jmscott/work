#!/usr/bin/env bash
#
#  Synopsis:
#	Build a tar or populate makefile from a shell sourcable config file.
#  Usage:
#	make-make --help
#	make-make --template >foobar.mkmk
#	vi foobar.mkmk
#
#	make-make foobar.mkmk
#	D=$(pwd)
#	cd /usr/local/foobar && tar xvf $D/foobar-20140403_1213.tar.bz2
#
#	#  Makefile variables can be extracted from the the root.mkmk file
#	#  with these recipes.  Example make code follows:
#
#		DIST=product.mkmk
#		COMPILEs := $(shell  (. ./$(DIST) && echo $$COMPILEs))
#		SBINs := $(shell  (. ./$(DIST) && echo $$SBINs))
#		LIBs := $(shell  (. ./$(DIST) && echo $$LIBs))
#		SRCs := $(shell  (. ./$(DIST) && echo $$SRCs))
#
#	Config variables to create directories are these:
#
#		ARCHIVE=""
#		ATTIC=""
#		BINs="[files] ..."
#		CACHE=""
#		CGIBINs="[files] ..."
#		DATA=""
#		ETC=""
#		HTDOCs="[files] ..."
#		LIBEXECs="[files] ..."
#		LIBs="[files] ..."
#		LOG=""
#		RUN=""
#		SBINs="[files] ..."
#		SPOOL=""
#		SRCs="[files] ..."
#		TMP=""
#
#	Empty string implies directory is created, if needed.
#	Any files
#
#  See:
#	https://github.com/jmscott/work/blob/master/make-make
#	https://en.wikipedia.org/wiki/Unix_filesystem
#  Note:
#	Consider a variable VAR_ROOT for variable directores like etc/, data/,
#	spool/, ... Currently the dynamical directories are created at the
#	the same level as the static directories.
#
#	The tar version insures that dynamic directories in foobar.conf
#	exist but does NOT ever overwrite, lest precious data be lost.
#	However, the Makefile version, does not insure, so make recipes
#	must be hand coded.  Adding an option to generate the install
#	recipes would be nice:
#
#		make-make dynamic-dirs
#
#	Which could be manually spliced back into the Makefile.
#
#	Add command "env" or "fs" to document environment variables in config
#	file that describe directories.
#	
#	Replace --<options> with <actions> like modern cli systems
#
#		make-make tar <product>.mkmk
#		make-make template
#		make-make frisk <product>.mkmk
#
#	New options --frisk to sort list in VARs and replace "root.mkmk"
#	to $PRODUCT.mkmk
#
#	Think deeply about recursive version that can combine *.mkmk files
#
#	Rename variable PRODUCT to less ambitious REPO.
#
#	What does "copy_files BASEs mean?
#
#	Why are the dirs/ for copy_files() hardwired for BINs, SBINs, etc?
#	Should not thast list be derived from the mkmk file?
#
#	Add --unpack option, which properly removes and unpacks *.tar.bz2
#	directories.  Will need to make no assumptions about the root directory
#	files.  In other words, if, say, dir sbin/ is not in the tar file,
#	then --unpack would NOT remove an existing /sbin/ on the target.
#	This algorithm implies knowing the difference between  static dirs
#	like /sbin/, /lib/, etc versus dynatic dirs like /run/, /spool/.
#	Perhaps if the directory is empty in the tar file, then we can
#	safely assume the directory is dynamic and NOT to be removed on the
#	target.
#
#	Consolidate this comment preamble and the --help docs.
#
#	Rename make-make to make-tar-mkmk.
#
#	At least one file must exist in the root.mkmk file.	
#
#	What about moving the dynamic directories like tmp/ spool/
#	into var/?  Perhaps a variable VAR_DIR="spool data"?
#

PROG=$(basename $0)
USAGE="$PROG [--help] [--template] <product>.mkmk"

help()
{
	cat <<END

Synopsis:
	Create a tar file for a typical SystemV unix file system layout.
Usage:
	$USAGE
Description:
	$PROG reads a configuration file and builds a bzipped tar file of the 
	files in a typical unix directory layout.  The confiugration files
	contains bourne shell variable definitions.  The tar file is 
	suitable for manually unpacking to install or upgrade a target host.  
	The files rebuilt in the tar archive into the following sub
	directories:
	
		 bin/	#  read only executables executed by cli or scripts
		sbin/	#  read only executables executed by daemons/services.
		 src/	#  compilable source code, not scripts.
	         lib/	#  read only support files.  typically sql scripts,
			#    perl libraries, etc.
	     libexec/	#  hidden executables, typically called from scripts.
	     cgi-bin/	#  cgi-scripts for web server
	      htdocs/	#  htdoc scripts for web server
		
	In the configuration file are environment variables BINs, CGIBINs, 
	LIBs, SBINs and HTDOCs that contain the source file list for
	each target directory.  Also, empty directories may be created
	when the variables SPOOL, RUN, ETC, LOG, TMP, DATA and CACHE exist.
	Do make-make --template for the list of all variables recognized.

	The compressed tar file is written into a file named 

		$PRODUCT-YYYYMMDD_HHmm.tar.bz2.

	where PRODUCT is the $(basename $(pwd)).  To change the basename of
	the product, define the PRODUCT environment variable in the
	configuration file.

		PRODUCT=setspace

	To unpack the tar file on the production host, do something like

		scp \$PRODUCT-YYMMDD_HHMM.tar.bz2 \$PRODUCT@host:/tmp
		ssh \$PRODUCT@host
		cd <target-dir>
		bzcat /tmp/\$PRODUCT-YYMMDD_HHMM.tar.bz2 | tar xvf -
Exit Status:
	0	no error
	1	error, temp build directory, named ./tmp/make-make.\$\$,
			remains intact for debugging.
END
}

PRODUCT=$(basename $(pwd))

die()
{
	echo "$PROG: ERROR: $@" >&2
	echo "usage: $USAGE"
	exit 1
}

is_readable()
{
	VAR=$1
	CMD='FILES=$(echo $'$VAR')'
	eval $CMD
	for F in $FILES;  do
		test -r $F || die "$VAR: can't read file $F"
	done
}

#
#  Recursively copy files defined in a shell variable to a target directory
#  in the staging tree.
#
copy_files()
{
	VAR=$1;		shift
	DIR=$1;		shift
	PERMD=$1;	shift
	PERMF=$1;	shift

	#
	#  Echo the value of the variable whose name is $VAR.
	#
	CMD='FILEs=$(echo $'$VAR')'
	eval $CMD

	if [ ! "$FILEs" ];  then
		echo "-$DIR"
		return
	fi
	#
	#  Make the staging directory.
	#
	echo "+$DIR"
	mkdir -p $WORK_TMP/$DIR || die "$VAR: mkdir $WORK_TMP/$DIR failed"
	#
	#  Copy the files and directories into the staging directory
	#
	for F in $FILEs;  do
 		#
		#  The config file has a directory entry,
		#  so just make the directory.
		#
		if [ -d $F ];  then
			echo "+$DIR/$F/"
			DN=$WORK_TMP/$DIR/$F
			mkdir -p $DN || die "mkdir -p $DN failed"
			continue
		fi

		#
		#  The file lives in an uncreated directory.
		#
		DN=$(dirname $F | sed "s/^$DIR\///" | sed "s/^$DIR$//")
		if [ "$DN" -a ! -d $WORK_TMP/$DIR/$DN ];  then
			echo "+$DIR/$DN/"
			D="$WORK_TMP/$DIR/$DN"
			mkdir -p $D || die "mkdir -p $D failed"
		fi
		#
		#  Derive the target directory path.
		#
		#  Eliminate the /./ directory path component
		#  for clarity.
		#
		case "$DN" in
		''|.)
			D=$DIR
			;;
		*)
			D="$DIR/$DN"
		esac
		#
		#  Ought to check fo existence of file before copy?
		#
		echo ">$D/$(basename $F)"
		cp $F $WORK_TMP/$D || die "cp $F $WORK_TMP/$D failed"
	done

	#  Note:  need to test for error!

	find $WORK_TMP/$DIR -type d -print | xargs chmod $PERMD
	if [ "$FILEs" ];  then
		find $WORK_TMP/$DIR -type f -print | xargs chmod $PERMF
	fi
}

#  Makefile an empty directory
make_dir()
{
	VAR=$1;		shift
	PERMD=$1;	shift

	DIR=$(echo $VAR | tr A-Z a-z)
	EXISTS=$(eval "echo \${$VAR+$VAR}")
	case "$EXISTS" in
	$VAR)
		echo "+$DIR"
		;;
	'')
		echo "-$DIR"
		return
		;;
	*)
		die "make_dir: unexpected eval: $EXISTS"
		;;
	esac

	#
	#  Make the staging directory.
	#
	#  Note:  need to test for error!
	#
	mkdir -p $WORK_TMP/$DIR || die "$VAR: mkdir $WORK_TMP/$DIR failed"
	find $WORK_TMP/$DIR -type d -print | xargs chmod $PERMD
}

test $# = 0 && die "wrong number of arguments"

#
#  Read the configuration file.
#
case "$1" in
'')
	die "wrong number of argument"
	;;
--help)
	help
	exit 0
	;;
--template)
	cat <<END
#
#  Synopsis:
#	Configuration file read by make-make to build tar files.
#  See:
#	https://github.com/jmscott/work/blob/master/make-make
#  Note:
#	Makefile variables can be extracted and defined from the the
#	root.mkmk file with these recipes.  Example make code follows:
#
#		DIST=product.mkmk
#
#		SBINs := \$(shell  (. ./\$(DIST) && echo \$\$SBINs))
#		LIBs := \$(shell  (. ./\$(DIST) && echo \$\$LIBs))
#		SRCs := \$(shell  (. ./\$(DIST) && echo \$\$SRCs))
#		BINs := \$(shell  (. ./\$(DIST) && echo \$\$BINs))
#		HTDOCs := \$(shell  (. ./\$(DIST) && echo \$\$HTDOCs))
#		CGIBINs := \$(shell  (. ./\$(DIST) && echo \$\$CGIBINs))
#		LIBEXEC := \$(shell  (. ./\$(DIST) && echo \$\$LIBEXECs))
#		COMPILEs := \$(shell  (. ./\$(DIST) && echo \$\$COMPILEs))
#

#  Define PRODUCT to change name of tar file from \$(basename \$(pwd))
#  to, say, foobar-YYYYMMDD_hhmm.tar.bz2

#PRODUCT=foobar

LIBs="
"

BINs="
"

#  Uncomment to create sbins/ directory
#SBINs="
#"

#  Uncomment to create tmp/ directory
#TMP="
#"

#  Uncomment to create cgibin/ directory
#CGIBINs="
#"

#  Uncomment to create htdocs/ directory
#HTDOCs="
#"

#  Uncomment to create src/ directory
#SRCs="
#"

#  Uncomment to create attic/ directory
#ATTIC="
#"

#  Uncomment to create archive/ directory
#ARCHIVE="
#"

#  Uncomment to create etc/ directory
#ETC="
#"

#  Uncomment to create spool/ directory
#SPOOL="
#"

#  Uncomment to create data/ directory
#DATA="
#"

#  Uncomment to create run/ directory
#RUN="
#"

#  Uncomment to create log/ directory
#LOG="
#"

#  Uncomment to create cache/ directory
#CACHE="
#"

#  Uncomment to create directory libexec/
#LIBEXECs="
#"

#  Uncomment for compiled programs to be removed in "clean" recipes.
#COMPILEs="
#"


END
	exit 0
	;;
-*)
	die "unknown option: $1"
	;;
*)
	CONF="$1"
	test -r "$CONF" || die "can't read configuration file: $CONF"
	;;
esac

#
#  Source in the configuration file.
#
. ./$CONF

#
#  PRODUCT is basename of directory, by default;
#  otherwise, whatever is set in the configuration file.
#
PRODUCT=${PRODUCT:=$(basename $(pwd))}

echo "# product is $PRODUCT"

#
#  Verify that files are readable.
#
is_readable BINs
is_readable SBINs
is_readable CGIBINs
is_readable LIBs
is_readable HTDOCs

#
#  Make temporary work directory.
#
WORK_TMP=tmp/$PROG.$$
test -d $WORK_TMP && die "tmp directory $WORK_TMP already exists"
mkdir -p $WORK_TMP || die "mkdir -p $WORK_TMP failed"
echo ">$WORK_TMP"

#
#  Copy files in various staging directories
#
#	copy_files VAR dir dir_perms file_perms
#
#  Does the order of the directories matter?
#  Probably ought to be the order defined in the file.
#
copy_files BASEs . u=rwx,g=rx,o= ug=rx,o=		#  clarify!?
copy_files BINs bin u=rwx,g=rx,o= ug=rx,o=
copy_files CGIBINs cgi-bin u=rwx,g=rx,o= ug=rx,o=
copy_files HTDOCs htdocs u=wrx,g=rx,o= ug=r,o=
copy_files LIBEXECs libexec u=rwx,g=rx,o= ug=rx,o=
copy_files LIBs lib u=rwx,g=rx,o= ug=r,o=
copy_files SBINs sbin u=rwx,go= u=rx,go=
copy_files SRCs src u=rwx,g=rx,o= ug=r,o=

#  make directories, if variables defined in <product>.mkmk file

make_dir ARCHIVE u=wrx,go=
make_dir ATTIC u=wrx,go=
make_dir CACHE u=wrx,go=
make_dir DATA u=wrx,go=
make_dir ETC u=wrx,g=rx,o=
make_dir LIBEXEC u=wrx,g=rx,o=
make_dir LOG u=wrx,g=rx,o=
make_dir RUN u=wrx,go=
make_dir SPOOL u=wrx,go=
make_dir TMP ug=wrx,o=

#
#  Tar up files into $PRODUCT-YYYYMMDD_hhmm.tar.bz2
#
TAR_FILE=$PRODUCT-$(date +'%Y%m%d_%H%M').tar.bz2
echo ">$TAR_FILE"
(
	cd $WORK_TMP || die "cd $WORK_TMP failed"
	#
	#  Tar up files in scratch directory.
	#  Need to check tar error status with ${PIPSTATUS[]}.
	#
	tar cf - $(find . -mindepth 1 -maxdepth 1 -type d)
) | bzip2 --best >$TAR_FILE
test -s $TAR_FILE || die "empty tar file $TAR_FILE"

#
#  Zap the temporary scratch dir.
#
#  Note:
#	What about zapping dir tmp/ upon certain common errors,
#	like missing files.
#
find $WORK_TMP -print | xargs chmod +x
rm -rf $WORK_TMP || die "rm -rf $WORK_TMP failed"
exit 0
