#!/bin/bash
#
#  Synopsis:
#	rsync an entire file system to <sunk-root>/host/$(hostname)/root/<mount>
#  Description:
#  	Create a full rsunk snapshot of a single file system to a local
#
#	  	<sunk-root>/host/$(hostname)/root/<mount>
#
#	Typically the file system <mount> directory is / or /var and the
#	<sunk> directory is /backup/sunk or /sunk.
#
#	The sunk root and mount directories MUST be both full paths and point
#	to existing directories.  However, the final, target sunk directory will
#	be created, if needed.  The options --mount-point and --sunk-root
#	are required.
#
#	The rsync arguments are:
#
#		--numeric-ids
#		--filter=<mount>/.rsync-filter
#		'--exclude=<sunk-root>/*'
#		--archive
#		--delete
#		--delete-excluded
#		--human-readable
#		--itemize-changes
#		--one-file-system
#		--exclude /backup/sunk/$(hostname)/root/<fs>
#
#	When an error occurs, the --fault <path> option indicates the error
#	message will be appended to the <path> file, allowing for easy
#	snmp monitoring of process failures.
#
#	Files that disappear during the rsync will generate a fault, since
#	rsync exits with code 24.  To ignore such rsync errors (and not fault)
#	add the command line option --ignore-24.
#  Usage:
#	LOG=/var/local/log/rsync-fs-root.log
#	FAULT=/var/run/rsync-fs-var.fault
#
#	rsync-fs --sunk-root /sunk --mount-point / >$LOG
#	#
#	#  catalina+ on mac forbids writes to root!
#	#
#	rsync-fs --filter /tmp/rsync-filter --sunk-root /sunk --mount-point /
#	rsync-fs --mount-point /var --sunk-root /backup/sunk
#	rsync-fs --mount-point /var --fault $FAULT --sunk-root /sunk
#	rsync-fs --mount-point /var --ignore-24 --sunk-root /sunk
#
#	#  Or for daily snapshots with faults in /var/run
#	LOG=/var/log/rsync-fs
#	FAULT=/var/run/rsync-root.fault
#	
#	mkdir -p $LOG || exit
#	rsync-fs --mount-point /var --sunk-root /backup/sunk --fault $FAULT \
#		>$LOG/rsync-var-`%a`.log
#  Exit Status:
#	0	rsync exited 0
#	127	failure (not rsync error)
#  See:
#	https://github.com/jmscott/work/blob/master/rsync-fs
#  Note:
#	Verify that the source and target file system are not the same.
#	rsync may already do this.
#
#	Add rync option "--checksum"
#
#	Robust tests on multiple level dirs like /var/lib have not been
#	exercised.
#
#	Think about verifying the source is a file system, in a portable
#	manner.
#
#	Need to add notify.
#
START_EPOCH=$(date +%s)
PROG=$(basename $0)
HOST=$(hostname -f)
MOUNT_POINT=
SUNK_ROOT=
FAULT=
SUNK_TGT=
IGNORE_24=no
USER=${USER:=$LOGNAME}

#
#  Burp the comments section above and exit.
#
help()
{
	#
        #  Sorry about using perl for the absolute path derivation.
        #  The Mac OSX 10.7/bds readlink is different than
	#  the gnu readlink.
        #
        ABSPATH=$(perl -MCwd=realpath -e "print realpath '$0'")
        awk '
                !/^ *#/ {
                        exit
                }
                !/^# *!/
        ' $ABSPATH | sed 's/^# *//'
        exit 0
}

log()
{
	echo "$(date +'%Y-%m-%d %H:%M:%S'): $PROG#$$: $@"
}

warn()
{
	log "WARN: $@"
}

die()
{
	#
	#  Fire a fault by appending error message to file $FAULT.
	#
	MSG="ERROR: $@"

	#
	#  Caller requested that we append error to fault file.
	#
	if [ -n "$FAULT" ];  then
		log "appending error to fault file: $FAULT"
		log $MSG >>$FAULT					||
			log "ERROR: append to fault file failed: $FAULT" >&2
	fi
	log $MSG >&2
	exit 127
}

leave()
{
	log "good bye, cruel world: $(elapsed-english $START_EPOCH) elapsed"
}

test "$1" = '--help' && help
test $# -lt 4 && die 'wrong number of arguments'

case "$USER" in
'')
	die 'environment vars not defined: LOGNAME and USER'
	;;
root)
	;;
*)
	die "user is not root: $USER"
	;;
esac

while [ "$1" ];  do
	ARG=$1
	shift
	case $ARG in
	--help)
		help
		;;
	--inplace)
		test -z "$INPLACE" || die 'option --inplace set again'
		INPACE='--inplace'
		;;
	--dry-run)
		test -z "$DRY_RUN" || die 'option --dry-run set again'
		DRY_RUN='--dry-run'
		;;
	--mount-point)
		test -z "$MOUNT_POINT" || die 'option --mount-point redefined'
		MOUNT_POINT=$1;  shift

		case $MOUNT_POINT in
		'')
			die 'option --mount-point: missing path'
			;;
		/*)
			test -d $MOUNT_POINT ||
				   die "option --mount-point:" 		\
					   "not a directory: $MOUNT_POINT"
			;;
		*)
			die 'mount point directory must start with /'
			;;
		esac
		;;
	--sunk-root)
		test -z "$SUNK_ROOT" || die 'option --sunk-root redefined'
		SUNK_ROOT="$1";  shift

		case $SUNK_ROOT in
		'')
			die 'option --mount-point: missing path'
			;;
		/*)
			test -d $SUNK_ROOT ||
				   die "option --sunk-root:" 		\
					   "not a directory: $SUNK_ROOT"
			;;
		*)
			die 'sunk root directory must start with /'
			;;
		esac
		;;
	--fault)
		test -z "$FAULT" || die 'option --fault redefined'
		FAULT="$1";  shift
		test -n "$FAULT" || die 'option --fault: missing file path'
		if [ -e "$FAULT" ];  then
			warn "fault file exists: $FAULT"
			warn "contents fault file: $(cat $FAULT)"
		fi
		;;
	--filter)
		test -z "$FILTER" || die 'option --filter given more than once'
		FILTER="$1";  shift
		;;
	--ignore-24)
		IGNORE_24=yes
		;;
	--*)
		die "unknown command line option: $ARG"
		;;
	*)
		die "unknown command line argument: $ARG"
		;;
	esac
done
test -z "$MOUNT_POINT" && die 'missing required option: --mount-point'
test -z "$SUNK_ROOT" && die 'missing required option: --sunk-root'

trap leave INT QUIT TERM EXIT
log 'hello, world'

if [ -z "$FAULT" ];  then
	log 'no fault file given (ok): see option --fault'
else
	log "fault file: $FAULT"
fi
log "hostname: $HOST"
log "PATH: $PATH"
log "rsync version: $(rsync --version | head -1)"
log "sunk root: $SUNK_ROOT"
log "source file system mount directory: $MOUNT_POINT"
log "ignore rsync error 24 (files vanished): $IGNORE_24"

#
#  Build the rsync-filter path and target sunk directory path from the
#  hostname, sunk root path and mount point.
#
case $MOUNT_POINT in
/)
	SUNK_TGT=$SUNK_ROOT/host/$HOST/root
	test -n "$FILTER" || FILTER='dir-merge /.rsync-filter'
	;;
/*)
	SUNK_TGT=$(dirname $SUNK_ROOT/host/$HOST/root$MOUNT_POINT)
	test -n "$FILTER" || FILTER="dir-merge $MOUNT_POINT/.rsync-filter"
	;;
*)
	die "first char not / in mount directory: $MOUNT_POINT"
	;;
esac
log "sunk target: $SUNK_TGT"

if [ ! -d $SUNK_TGT ];  then
	log "creating sunk target directory: $SUNK_TGT"
	mkdir -p $SUNK_TGT || die "mkdir sunk target failed: exit status=$?"
fi

log "rsync filter: $FILTER"

log 'starting rsync ...'
time rsync $INPLACE $DRY_RUN						\
	--numeric-ids							\
	--filter="$FILTER"						\
	"--exclude=$SUNK_ROOT/*"					\
	--archive 							\
	--delete							\
	--delete-excluded						\
	--human-readable 						\
	--itemize-changes						\
	--one-file-system						\
	--exclude $SUNK_TGT						\
	$MOUNT_POINT $SUNK_TGT
STATUS=$?
log "rsync exit status: $STATUS"

if [ $STATUS -ne 0 ];  then
	if [ $STATUS -eq 24 -a $IGNORE_24 = yes ];  then
		warn 'rsync exit of 24 and --ignore-24 requested'
		warn 'ignoring rsync error code'
	else
		die "rsync failed: exit status=$STATUS"
	fi
fi
exit 0
